void	PmergeMe::getPairsFromVector(std::vector<int> v)
{
	this->_main_chain.push_back(20);
	this->_main_chain.push_back(17);
	this->_main_chain.push_back(15);
	this->_main_chain.push_back(12);
	this->_main_chain.push_back(11);
	this->_main_chain.push_back(10);
	this->_main_chain.push_back(4);
	addToMainChain(2);
	std::cout << "Result main chain: ";
	for(std::vector<int>::iterator i = this->_main_chain.begin(); i != this->_main_chain.end(); i++)
		std::cout << " " << *i;
	std::cout << std::endl;
}

void	PmergeMe::addToMainChain(int n)
{
	std::vector<int>::iterator	insertion_it;
	int	media;

	if (n == 0)
		return;
	std::cout << "main chain: ";
	for(std::vector<int>::iterator i = this->_main_chain.begin(); i != this->_main_chain.end(); i++)
		std::cout << " " << *i;
	std::cout << std::endl;
	std::cout << "n: " << n << std::endl;

	if ((this->_main_chain.size() % 2) == 0)
	{
		insertion_it = this->_main_chain.begin() + (this->_main_chain.size() / 2);
		media = (*insertion_it + *(--insertion_it)) / 2;
		if (n < media)
		{
			while (n < *insertion_it)
			{
				insertion_it++;
			}
			this->_main_chain.insert(insertion_it, n);
		}
	}
	else
	{
		insertion_it = this->_main_chain.begin() + (this->_main_chain.size() / 2);
		media = *insertion_it;
		std::cout << "media impar" << media << std::endl;
		if (n < media)
		{
			while (n < (*insertion_it))
			{
				insertion_it++;
			}
			this->_main_chain.insert(insertion_it, n);
		}
	}
}